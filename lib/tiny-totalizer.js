/*jshint white:false, eqnull:true, immed:false, forin:false, globalstrict:true, node:true */
'use strict';

// Generated by CoffeeScript 1.6.2
var TinyTotalizer,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

TinyTotalizer = (function() {
  var _calc, _fixNumber, _match, _standardize,
    _this = this;

  _standardize = [
    function(s) {
      return s;
    }, function(s) {
      return s.toLowerCase();
    }, function(s) {
      return s.toLowerCase().replace(/\s/g, '');
    }
  ];

  function TinyTotalizer(opt, hash) {
    var k, v, _base, _base1, _ref, _ref1, _ref2;

    this.opt = opt != null ? opt : {};
    this.hash = hash != null ? hash : {};
    this.ranking = __bind(this.ranking, this);
    this.sub = __bind(this.sub, this);
    this.add = __bind(this.add, this);
    if ((_ref = (_base = this.opt).allowMinus) == null) {
      _base.allowMinus = true;
    }
    if ((_ref1 = (_base1 = this.opt).fuzzyLevel) == null) {
      _base1.fuzzyLevel = 0;
    }
    if (this.opt.standardizer instanceof Function) {
      this.opt.fuzzyLevel = _standardize.length;
      _standardize.push(this.opt.standardizer);
    }
    _ref2 = this.hash;
    for (k in _ref2) {
      v = _ref2[k];
      if (typeof v === 'number') {
        if (!this.opt.allowMinus && v < 0) {
          this.hash[k] = 0;
        }
      } else {
        if (typeof v === 'string') {
          v = v.trim();
          if (/^\d+$/.test(v)) {
            this.hash[k] = Number(v);
            continue;
          }
        }
        delete this.hash[k];
      }
    }
  }

  _match = function(key) {
    var hk, k, mk, _ref, _ref1;

    if (this.hash.hasOwnProperty(key)) {
      return key;
    }
    mk = _standardize[this.opt.fuzzyLevel](key);
    hk = (_ref = (function() {
      var _results;

      _results = [];
      for (k in this.hash) {
        if (mk === _standardize[this.opt.fuzzyLevel](k)) {
          _results.push(k);
        }
      }
      return _results;
    }).call(this)) != null ? _ref : [];
    return (_ref1 = hk[0]) != null ? _ref1 : key;
  };

  _calc = function(key, n) {
    var mKey, _base, _ref;

    mKey = _match.call(this, key, this.opt.fuzzyLevel);
    if ((_ref = (_base = this.hash)[mKey]) == null) {
      _base[mKey] = 0;
    }
    this.hash[mKey] += n;
    if (this.hash[mKey] < 0 && !this.opt.allowMinus) {
      this.hash[mKey] = 0;
    }
    return this.hash[mKey];
  };

  _fixNumber = function(n) {
    if (typeof n === 'number') {
      return n;
    }
    if (typeof n === 'string') {
      if (/^\d+$/.test(n.trim())) {
        return Number(n);
      }
    }
    return 0;
  };

  TinyTotalizer.prototype.add = function(key, n) {
    if (n == null) {
      n = 1;
    }
    return _calc.call(this, key, _fixNumber(n));
  };

  TinyTotalizer.prototype.sub = function(key, n) {
    if (n == null) {
      n = 1;
    }
    return _calc.call(this, key, _fixNumber(n) * -1);
  };

  TinyTotalizer.prototype.ranking = function(opt) {
    var ary, count, name, _ref;

    if (opt == null) {
      opt = {};
    }
    ary = (function() {
      var _ref, _results;

      _ref = this.hash;
      _results = [];
      for (name in _ref) {
        count = _ref[name];
        if (!opt.border || count >= opt.border) {
          _results.push({
            name: name,
            count: count
          });
        }
      }
      return _results;
    }).call(this);
    if (opt.asc) {
      ary.sort(function(a, b) {
        return a.count - b.count;
      });
    } else {
      ary.sort(function(a, b) {
        return b.count - a.count;
      });
    }
    ary.length = Math.min(ary.length, (_ref = opt.topN) != null ? _ref : ary.length);
    return ary;
  };

  return TinyTotalizer;

}).call(this);

module.exports = TinyTotalizer;
